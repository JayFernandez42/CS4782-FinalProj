# -*- coding: utf-8 -*-
"""eval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15lyXSu06z14MKsLJS0LZmEVRnh7U5Hrz
"""

import random
import matplotlib.pyplot as plt
import torch

def test_loss(model, test_loader, vocab, criterion, device):
    model.eval()
    loss_total = 0
    with torch.no_grad():
        for imgs, caps, _ in test_loader:
            imgs, caps = imgs.to(device), caps.to(device)
            out = model(imgs, caps)
            loss = criterion(out.view(-1, len(vocab)), caps.view(-1))
            loss_total += loss.item()
    print(f"ðŸ“‰ Test Loss: {loss_total / len(test_loader):.4f}")

def generate_question(model, test_loader, vocab, idx_to_word, device):
    model.eval()
    images, _, texts = next(iter(test_loader))
    image = images[0].unsqueeze(0).to(device)
    original_question = texts[0]

    with torch.no_grad():
        # feat = model.encoder(image)
        feat = image
        inp = torch.tensor([[vocab["<start>"]]], device=device)
        output = []
        for _ in range(20):
            out = model.decoder(feat, inp)
            pred = out[0, -1].argmax().item()
            if pred == vocab["<end>"]:
                break
            output.append(pred)
            inp = torch.cat([inp, torch.tensor([[pred]], device=device)], dim=1)

    decoded = " ".join(idx_to_word.get(i, "<unk>") for i in output)
    plt.imshow(image.cpu().squeeze().permute(1, 2, 0))
    plt.axis("off")
    plt.title(f"Generated: {decoded}\nOriginal: {original_question}")
    plt.show()